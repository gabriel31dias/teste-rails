continue
 decoded_token = JWT.decode(headers['Authorization'].split(' ').last, ENV['JWT_SECRET_KEY'], true, algorithm: 'HS256')
 decoded_token = JWT.decode(token, ENV['JWT_SECRET_KEY'], true, algorithm: 'HS256')
ENV['JWT_SECRET_KEY']
JwtService.decode(http_auth_header)
headers['Authorization'].split(' ').last
headers['Authorization']
continue
ENV['JWT_SECRET_KEY']
quit
ENV['JWT_SECRET_KEY']
ENV[:JWT_SECRET_KEY]
ENV
ENV['JWT_SECRET_KEY']
continue
ENV['JWT_SECRET_KEY']
continue
quit
Rails.application.credentials.jwt_secret
Rails.application.credentials.secret
Rails.application.credentials
Rails.application.credentials[:jwt_secret]
quit
decoded_token = JWT.decode(token, Rails.application.credentials.jwt_secret, true, algorithm: 'HS256')
 token = request.headers['Authorization']&.split(' ')&.last
 decoded_token = JWT.decode(token, Rails.application.credentials.jwt_secret, true, algorithm: 'HS256')
 token = request.headers['Authorization']&.split(' ')&.last
quit
 token = request.headers['Authorization']
decoded_token = JWT.decode(token, Rails.application.credentials.jwt_secret, true, algorithm: 'HS256')
quit
]
request.headers['Authorization']

 decoded_token = JWT.decode(token, 'JWT_SECRET', true, algorithm: 'HS256')
 token = request.headers['Authorization']
token
request.headers['Authorization']
 decoded_token = JWT.decode(token, 'JWT_SECRET', true, algorithm: 'HS256')
request.headers['Authorization']
